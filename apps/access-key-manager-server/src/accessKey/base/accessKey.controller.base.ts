/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccessKeyService } from "../accessKey.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccessKeyCreateInput } from "./AccessKeyCreateInput";
import { AccessKey } from "./AccessKey";
import { AccessKeyFindManyArgs } from "./AccessKeyFindManyArgs";
import { AccessKeyWhereUniqueInput } from "./AccessKeyWhereUniqueInput";
import { AccessKeyUpdateInput } from "./AccessKeyUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccessKeyControllerBase {
  constructor(
    protected readonly service: AccessKeyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccessKey })
  @nestAccessControl.UseRoles({
    resource: "AccessKey",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAccessKey(
    @common.Body() data: AccessKeyCreateInput
  ): Promise<AccessKey> {
    return await this.service.createAccessKey({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateOfProcurement: true,
        expiryDate: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AccessKey] })
  @ApiNestedQuery(AccessKeyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccessKey",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accessKeys(@common.Req() request: Request): Promise<AccessKey[]> {
    const args = plainToClass(AccessKeyFindManyArgs, request.query);
    return this.service.accessKeys({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateOfProcurement: true,
        expiryDate: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccessKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccessKey",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accessKey(
    @common.Param() params: AccessKeyWhereUniqueInput
  ): Promise<AccessKey | null> {
    const result = await this.service.accessKey({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateOfProcurement: true,
        expiryDate: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccessKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccessKey",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAccessKey(
    @common.Param() params: AccessKeyWhereUniqueInput,
    @common.Body() data: AccessKeyUpdateInput
  ): Promise<AccessKey | null> {
    try {
      return await this.service.updateAccessKey({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateOfProcurement: true,
          expiryDate: true,
          status: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccessKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccessKey",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccessKey(
    @common.Param() params: AccessKeyWhereUniqueInput
  ): Promise<AccessKey | null> {
    try {
      return await this.service.deleteAccessKey({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateOfProcurement: true,
          expiryDate: true,
          status: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
